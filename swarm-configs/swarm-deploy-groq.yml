version: '3.9'

networks:
  unmute-net:
    external: true

volumes:
  traefik-cert:

services:
  traefik:
    image: traefik:v3.3.1
    command:
      - "--configFile=/etc/traefik/traefik-static.yml"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /root/traefik-static.yml:/etc/traefik/traefik-static.yml:ro
      - /root/traefik-dynamic.yml:/etc/traefik/dynamic.yml:ro
      - /root/certs:/etc/certs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      placement:
        constraints:
          - node.role == manager
    networks:
      - unmute-net

  frontend:
    image: intellipedia/inti-frontend:v15.11.21
    environment:
      - NEXT_PUBLIC_IN_DOCKER=true
      - NEXT_PUBLIC_WS_URL=wss://inti.intellipedia.ai/v1/realtime
      - NEXT_PUBLIC_API_BASE=https://inti.intellipedia.ai/api
      - NEXT_PUBLIC_BACKEND_URL=https://inti.intellipedia.ai/api
    deploy:
      update_config:
        order: start-first
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`inti.intellipedia.ai`)"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.tls=true"
        - "traefik.http.services.frontend.loadbalancer.server.port=3000"
        - "traefik.http.routers.frontend.priority=50"
    networks:
      - unmute-net

  backend:
    image: intellipedia/inti-backend:latest
    env_file:
      - .env
    deploy:
      update_config:
        order: start-first
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=Host(`inti.intellipedia.ai`) && PathPrefix(`/api`) && !PathPrefix(`/api/v1/`)"
        - "traefik.http.routers.backend.entrypoints=websecure"
        - "traefik.http.routers.backend.tls=true"
        - "traefik.http.routers.backend.priority=100"
        - "traefik.http.routers.backend.middlewares=backend-stripprefix"
        - "traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api"
        - "traefik.http.services.backend.loadbalancer.server.port=80"
    networks:
      - unmute-net

  unmute:
    image: intellipedia/unmute-websocket:v2
    env_file:
      - .env
    environment:
      - KYUTAI_LLM_URL=http://unmute_unmute_llm:8080
      - KYUTAI_LLM_MODEL=openai/gpt-oss-20b

      - KYUTAI_STT_URL=ws://unmute_unmute_stt:8080
      - KYUTAI_TTS_URL=ws://unmute_unmute_tts:8080
      - KYUTAI_VOICE_CLONING_URL=http://unmute_unmute_voice_cloning:8080
    deploy:
      update_config:
        order: start-first
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.unmute.rule=Host(`inti.intellipedia.ai`) && PathPrefix(`/api/v1/realtime`)"
        - "traefik.http.routers.unmute.entrypoints=websecure"
        - "traefik.http.routers.unmute.tls=true"
        - "traefik.http.routers.unmute.priority=200"
        - "traefik.http.routers.unmute.middlewares=unmute-stripprefix"
        - "traefik.http.middlewares.unmute-stripprefix.stripprefix.prefixes=/api"
        - "traefik.http.services.unmute.loadbalancer.server.port=80"
        # Back-compat + direct WS path without /api
        - "traefik.http.routers.unmute2.rule=Host(`inti.intellipedia.ai`) && PathPrefix(`/v1/realtime`)"
        - "traefik.http.routers.unmute2.entrypoints=websecure"
        - "traefik.http.routers.unmute2.tls=true"
        - "traefik.http.routers.unmute2.priority=200"
        - "traefik.http.routers.unmute2.service=unmute"
        - "traefik.http.routers.unmute-health.rule=Host(`inti.intellipedia.ai`) && PathPrefix(`/api/v1/health`)"
        - "traefik.http.routers.unmute-health.entrypoints=websecure"
        - "traefik.http.routers.unmute-health.tls=true"
        - "traefik.http.routers.unmute-health.priority=300"
        - "traefik.http.routers.unmute-health.middlewares=unmute-stripprefix"
        - "traefik.http.routers.unmute-health.service=unmute"
        # Voices endpoint so the configurator can fetch /api/v1/voices
        - "traefik.http.routers.unmute-voices.rule=Host(`inti.intellipedia.ai`) && PathPrefix(`/api/v1/voices`)"
        - "traefik.http.routers.unmute-voices.entrypoints=websecure"
        - "traefik.http.routers.unmute-voices.tls=true"
        - "traefik.http.routers.unmute-voices.priority=200"
        - "traefik.http.routers.unmute-voices.middlewares=unmute-stripprefix"
        - "traefik.http.routers.unmute-voices.service=unmute"
    networks:
      - unmute-net

  unmute_stt:
    image: intellipedia/inti-stt-groq-bridge:v1.0.1-ipv4-fix
    env_file:
      - .env
    environment:
      - GROQ_STT_MODEL=whisper-large-v3-turbo
    deploy:
      update_config:
        order: start-first
      labels:
        - "traefik.enable=false"
    networks:
      - unmute-net

  unmute_tts:
    image: intellipedia/inti-tts-groq-bridge:v1.0.1-ipv4-fix
    env_file:
      - .env
    deploy:
      update_config:
        order: start-first
      labels:
        - "traefik.enable=false"
    networks:
      - unmute-net

  unmute_llm:
    image: intellipedia/inti-llm-groq-proxy:v1.2-final-ipv4-fix
    env_file:
      - .env
    deploy:
      update_config:
        order: start-first
      labels:
        - "traefik.enable=false"
    networks:
      - unmute-net

  unmute_voice_cloning:
    image: nginx:alpine
    command: |
      sh -c "
      cat > /etc/nginx/nginx.conf << 'EOF'
      events { worker_connections 1024; }
      http {
        server {
          listen 8080;
          location /api/build_info {
            return 200 '{\"status\": \"ok\", \"service\": \"voice-cloning\"}';
            add_header Content-Type application/json;
          }
        }
      }
      EOF
      nginx -g 'daemon off;'
      "
    deploy:
      update_config:
        order: start-first
      labels:
        - "traefik.enable=false"
    networks:
      - unmute-net
